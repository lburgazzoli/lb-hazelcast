// *****************************************************************************
// -Djava.util.logging.manager=org.apache.logging.log4j.jul.LogManager
// *****************************************************************************

buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        jcenter()
    }

    dependencies {
        classpath 'com.bmuschko:gradle-nexus-plugin:2.3.1'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.12.0'
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.4.0.RELEASE'
    }
}

// *****************************************************************************
//
// *****************************************************************************

allprojects {
    configurations.all {
        resolutionStrategy.componentSelection.all {
            selection ->
                switch(selection.candidate.group) {
                    case 'com.fasterxml.jackson.core':
                    case 'com.fasterxml.jackson.dataformat':
                    case 'com.fasterxml.jackson.module':
                        if(selection.candidate.version.contains('-rc')) {
                            selection.reject('does-not-exist')
                        }
                        break
                    case 'commons-logging':
                        if(selection.candidate.version.contains('99.0-does-not-exist')) {
                            selection.reject('does-not-exist')
                        }
                        break
                    case 'com.google.guava':
                        if(selection.candidate.version.contains('-rc')) {
                            selection.reject('Release candidate')
                        }
                        break
                    case 'com.javaslang':
                        if(selection.candidate.version.contains('-RC')) {
                            selection.reject('Release candidate')
                        }
                        if(selection.candidate.version.contains('-beta')) {
                            selection.reject('Beta')
                        }
                        break
                    case 'org.springframework.boot':
                        if(selection.candidate.version.contains('.M')) {
                            selection.reject('Milestone')
                        }
                        if(selection.candidate.version.contains('.RC')) {
                            selection.reject('Release candidate')
                        }
                        break
                }
        }
    }
}

// *****************************************************************************
//
// *****************************************************************************

subprojects {
    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'maven'
    apply plugin: 'idea'
    apply plugin: 'osgi'
    apply plugin: 'com.bmuschko.nexus'
    apply plugin: 'com.github.ben-manes.versions'

    version = '3.6.0-SNAPSHOT'
    group   = 'com.github.lburgazzoli'

    ext {
        isReleaseVersion = !version.endsWith("SNAPSHOT")
        gitRoot          = "https://github.com/lburgazzoli"
        gitProject       = "https://github.com/lburgazzoli/lb-hazelcast"

        ext {
            versions = [
                slf4j              : '1.7.20',
                log4j2             : '2.6.2',
                jackson            : '2.8.1',
                jacksonSmile       : '2.8.1',
                hazelcast          : '3.6.4',
                guava              : '19.0',
                commonsLang        : '3.4',
                commonsCollections : '4.1',
                commonsPool        : '2.4.2',
                commonsIO          : '2.4',
                springBoot         : '1.3.3.RELEASE',
                junit              : '4.12',
                kryo               : '3.0.3',
                disruptor          : '3.3.0',
                gsCollections      : '7.0.0',
                groovy             : '2.4.6',
                jsonpath           : '1.2',
                fst                : '2.45',
                retrofit           : '1.9.0',
                dns                : '3.0.1',
                typeconverter      : '1.0.1',
                snakeyaml          : '1.17',
                reflections        : '0.9.10',
                javaslang          : '1.2.2',
                dns                : '3.0.2',
                etcd4j             : '2.7.0',
                sparkFramework     : '2.3',
                osgi               : '6.0.0',
                javaxCache         : '1.0.0'
            ]
        }

        if(!project.hasProperty('nexusUsername') && !project.hasProperty('nexusPassword')) {
            nexusUsername = "$System.env.CI_DEPLOY_USERNAME"
            nexusPassword = "$System.env.CI_DEPLOY_PASSWORD"
        }
    }

    compileJava {
        // Suppress warnings about using Unsafe and sun.misc
        options.compilerArgs << '-XDignore.symbol.file'
        //options.compilerArgs << '-parameters'

        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    compileGroovy {
        groovyOptions.configurationScript = file("${rootProject.projectDir}/gradle/groovy-config.groovy")
        groovyOptions.optimizationOptions.indy = true
    }

    // *************************************************************************
    //
    // *************************************************************************

    idea {
        module {
            downloadJavadoc = true
            downloadSources = true
        }
    }

    // *************************************************************************
    //
    // *************************************************************************

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()

        //maven { url 'https://oss.sonatype.org/content/repositories/releases' }
        //maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    }

    dependencies {
        compile("org.slf4j:slf4j-api:$versions.slf4j") { transitive = false }
        runtime("org.slf4j:slf4j-ext:$versions.slf4j") { transitive = false }

        runtime "org.apache.logging.log4j:log4j-api:$versions.log4j2"
        runtime "org.apache.logging.log4j:log4j-core:$versions.log4j2"
        runtime "org.apache.logging.log4j:log4j-jcl:$versions.log4j2"
        runtime "org.apache.logging.log4j:log4j-jul:$versions.log4j2"
        runtime "org.apache.logging.log4j:log4j-slf4j-impl:$versions.log4j2"

        compile "com.google.guava:guava:$versions.guava"
        compile "org.apache.commons:commons-lang3:$versions.commonsLang"
        compile "org.apache.commons:commons-collections4:$versions.commonsCollections"
        compile "com.javaslang:javaslang:$versions.javaslang"

        compile "org.codehaus.groovy:groovy-all:$versions.groovy:indy"
        compile "com.hazelcast:hazelcast-all:$versions.hazelcast"
        compile "javax.inject:javax.inject:1"

        testCompile "junit:junit:$versions.junit"
    }

    test {
        testLogging {
            events          'failed'
            exceptionFormat 'full'
        }
    }

    [compileJava, compileTestJava]*.options*.compilerArgs = [
        "-Xlint:unchecked",
        "-Xlint:deprecation",
    ]

    // *************************************************************************
    //
    // *************************************************************************

    jar {
        baseName = "${project.name}"

        manifest.attributes['Bundle-Description'     ] = "${project.name}"
        manifest.attributes['Bundle-Name'            ] = "${project.name}"
        manifest.attributes['Bundle-SymbolicName'    ] = "${project.group}-${project.name}"
        manifest.attributes['Bundle-Version'         ] = project.version.replaceAll('-','.')
        manifest.attributes['Implementation-Title'   ] = "${project.group}-${project.name}-${project.version}"
        manifest.attributes['Implementation-Version' ] = project.version
        manifest.attributes['Implementation-Vendor'  ] = 'lb'
    }

    // *************************************************************************
    //
    // *************************************************************************

    nexus {
        sign    = false
    }

    extraArchive {
        javadoc = true
        sources = true
        tests   = false
    }

    modifyPom {
        project {
            name          = "${project.name}"
            description   = "${project.name}"
            url           = "${project.gitProject}"
            packaging     = 'jar'

            licenses {
                license {
                    name         = "The Apache Software License, Version 2.0"
                    url          = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    distribution = "repo"
                }
            }

            scm {
                url                 = "${project.gitProject}"
                connection          = "scm:git:${project.gitProject}.git"
                developerConnection = "scm:git:${project.gitProject}.git"
            }
        }
    }

    dependencyUpdates {
        revision = 'release'
    }
}
